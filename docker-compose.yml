version: '3.5'
services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - ${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}
    networks:
      - elastic
  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic
  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic
  kibana:
    depends_on: [es01,es02,es03]
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    container_name: kibana
    volumes:
      - ./docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    networks:
      - elastic
  logstash:
    depends_on: [es01,es02,es03]
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    container_name: logstash
    volumes:
      - ./docker/logstash/elasticsearch/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./docker/logstash/elasticsearch/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - ${LOGSTASH_ES_PORT}:${LOGSTASH_ES_PORT}
    environment:
      - LS_JAVA_OPTS=${LS_JAVA_OPTS}
      - LOGSTASH_ES_PORT=${LOGSTASH_ES_PORT}
    networks:
      - elastic
      - datanorm
  logstashmongo:
    depends_on: [mongo]
    build:
      context: docker/logstash/mongo
    container_name: logstashMongo
    volumes:
      - ./docker/logstash/mongo/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./docker/logstash/mongo/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - ${LOGSTASH_MONGO_PORT}:${LOGSTASH_MONGO_PORT}
    environment:
      - LS_JAVA_OPTS=${LS_JAVA_OPTS}
      - LOGSTASH_MONGO_PORT=${LOGSTASH_MONGO_PORT}
    networks:
      - elastic
      - datanorm    
  mongo:
    container_name: mongo
    image: mongo:latest
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    volumes:
      - datadb:/data/db
    networks: 
      - mongodb
      - datanorm   
  nodejs:
    container_name: nodejs
    depends_on: [mongo]
    build:
      context: nodejs/
    working_dir: /app
    environment: 
      - CONSUMER_KEY=${CONSUMER_KEY}
      - CONSUMER_SECRET=${CONSUMER_SECRET}
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
    volumes:
      - ./:/app
      - /app/node_modules
    ports:
      - ${NODE_PORT}:${NODE_PORT}
    command: sh -c 'node ./nodejs/server.js'
    networks: 
      - datanorm
      - mongodb

volumes:
  data01:
  data02:
  data03:
  datadb:

networks:
  elastic:
  datanorm:
  mongodb:
